import deadpixel.keystone.*;

import oscP5.*;
import netP5.*;


//for OSC
OscP5 oscP5;
//where to send the commands to
NetAddress[] server;

float angle;


//we'll keep the cubes here
Cube[] cubes;

// Track specific toio functions to easy to digest references
HashMap<String, Cube> toioMap;



void settings() {
  size((int) (.75 * 3120), (int) (.75 *  2160), P3D);
}

void setup() {

  projection_setup();


  // for OSC
  // receive messages on port 3333
  oscP5 = new OscP5(this, 3333);

  //send back to the BLE interface
  //we can actually have multiple BLE bridges
  server = new NetAddress[2]; //only one for now
  //send on port 3334
  server[0] = new NetAddress("127.0.0.1", 3334)  ;
  server[1] = new NetAddress("127.0.0.1", 3335)  ;

  println("Starting program!");
  //create cubes
  cubes = new Cube[nCubes];
  for (int i = 0; i< cubes.length; ++i) {
    cubes[i] = new Cube(i, true);
  }
  toioMap = new HashMap();
  //do not send TOO MANY PACKETS
  //we'll be updating the cubes every frame, so don't try to go too high
  frameRate(30);


  trail_setup();
  planet_setup();
  ks.toggleCalibration();
  calibrated = false;
  angle = 0;
}

float convertCoordSystem(float coord, int oldSysMin, int oldSysMax, int newSysMin, int newSysMax) {
  float newSysRange = newSysMax - newSysMin + 1;
  
  float oldSysRange = oldSysMax - oldSysMin + 1;
  
  float fromLowerBound = coord - oldSysMin;
  float rangeAmount = fromLowerBound / oldSysRange;
  
  float newCoord = newSysMin + rangeAmount * newSysRange;

  return newCoord;
}

boolean calibrated = false;
  
void initCalibrate() {
  // Initializing function to assign toio to specific interface parts
    for (int i = 0; i< cubes.length; ++i) {
      float x = cubes[i].getXPos();
      float y = cubes[i].getYPos();
      if (x < -20 && y < -20 && y > -100 && x > -100) {
        cubes[i].setCoord(-100, -100);
        toioMap.put("hr", cubes[i]); // top left quadrant, left mat
      } else if (x > 20 && y < -20) {
        cubes[i].setCoord(80, -100);
        toioMap.put("planet_orbit", cubes[i]); // top right quadrant, right mat
      } else if (x < -20 && y > 20) {
        cubes[i].setCoord(-100, 80);
        toioMap.put("timeline", cubes[i]); // bottom left quadrant, left mat
      } else if (x > -20 && x < 50 && y > -20 && y < 50) {
        cubes[i].setCoord(-50, -50);
        
        toioMap.put("star_top_l", cubes[i]);
      } else if (x > 50 && y > -20 && y < 50) {
        cubes[i].setCoord(50, -50);
        toioMap.put("star_top_r", cubes[i]);
      } else if (x > -20 && x < 50 && y > 50) {
        cubes[i].setCoord(-50, 50);
        toioMap.put("star_bot_l", cubes[i]);
      } else if (x > 50 && y > 50) {
        cubes[i].setCoord(50, 50);
        toioMap.put("star_bot_r", cubes[i]);
      }
    }
  if (toioMap.size() == 7) {
    calibrated = true;
  }
}



void draw() {
  background(0);
  
  // ------------- //

  offscreen4.beginDraw();
  offscreen4.background(255);
  offscreen4.stroke(0);
  long now = System.currentTimeMillis();

  // //draw the "mat"
  offscreen4.fill(255);
  offscreen4.rect(45, 45, 410, 410);
  
  int i = 0;
  for (HashMap.Entry<String, Cube> mapElement : toioMap.entrySet()) {
      String name = mapElement.getKey();
      Cube cube = mapElement.getValue();
      if (cube.isLost==false) {
        offscreen4.pushMatrix();
        offscreen4.translate(cube.x, cube.y);
        offscreen4.rotate(cube.deg * PI/180);
        offscreen4.rect(-10, -10, 20, 20);
        offscreen4.rect(0, -5, 20, 10);
        offscreen4.popMatrix();
      }
      
    offscreen4.fill(0, 0, 0);
    offscreen4.text("Cube ID: " + name + " at (" + String.valueOf(cube.getXPos()) + ", " +
       String.valueOf(cube.getYPos()) +")", 500, 100 + 60 * i);
    offscreen4.text("Left motor speed: " + String.valueOf(cube.speed_left), 500, 120 + 60 * i);
    offscreen4.text("Right motor speed: " + String.valueOf(cube.speed_right), 500, 140 + 60 * i);
    
    if (name.equals("hr") || name.equals("timeline")) {
      OscMessage msg = new OscMessage("/toio_input");
      msg.add(name);
      msg.add(cube.getXPos());
      msg.add(cube.getYPos());
      
      oscP5.send(msg, server[1]);
    }
    i += 1;
  }
  angle += PI / 8.0 / 30;
  
    if (!calibrated) {
     initCalibrate(); 
     if (calibrated) {
       midi(0, 64, 255, 10);
     }
    } 

  //START DO NOT EDIT
  //did we lose some cubes?
  for (i=0; i<nCubes; ++i) {
    // 500ms since last update
    cubes[i].p_isLost = cubes[i].isLost;
    if (cubes[i].lastUpdate < now - 1500 && cubes[i].isLost==false) {
      cubes[i].isLost= true;
    }
  }
  
  offscreen4.endDraw();
  
  surface4.render(offscreen4);
  //END DO NOT EDIT

  // ------------- //
  
  if (!calibrated) {
    return;
  } 
  
  for (HashMap.Entry<String, Cube> mapElement : toioMap.entrySet()) {
      String name = mapElement.getKey();
      Cube cube = mapElement.getValue();
      
      if (!cube.isLost) {
        offscreen4.fill(0, 255, 0);
        println("Moving ", name, " to ", (int) cube.targetx, (int) cube.targety);
        motorTarget(cube.id, 0, (int) cube.targetx, (int) cube.targety, 90);
      }
      
    }

  //motionRequest(toioMap.get("timeline").id);

  // ------------- //
  
  // no arguments: this includes offscreen2 and 3 draw calls.
  project_hr_and_slider();

  offscreen1.beginDraw();
  float orbit_x = toioMap.get("planet_orbit").getXPos();
  float orbit_y = toioMap.get("planet_orbit").getYPos();
  orbit_x = convertCoordSystem(orbit_x,-100,100,0,1000);
  orbit_y = convertCoordSystem(orbit_y,-100,100,0,1000);
  project_trail(orbit_x,orbit_y);
  
  // These are in the [-100, 100] coordinate system
  float center_x = 0.0;
  float center_y = 0.0;
  float rad = (float) Math.sqrt((double) (orbit_x * orbit_x + orbit_y * orbit_y)) / 2;
  project_planet(center_x, center_y, rad, star_r, star_g, star_b);
  offscreen1.endDraw();
  surface1.render(offscreen1);
}
